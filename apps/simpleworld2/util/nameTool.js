let highlanderNamesM = [
  "Arne",
  "Birger",
  "Bjorn",
  "Bo",
  "Erik",
  "Frode",
  "Gorm",
  "Halfdan",
  "Harald",
  "Harald",
  "Knud",
  "Kare",
  "Leif",
  "Njal",
  "Roar",
  "Rune",
  "Sten",
  "Skarde",
  "Sune",
  "Svend",
  "Troels",
  "Toke",
  "Torsten",
  "Trygve",
  "Ulf",
  "Odger",
  "Age",
  "Adalvald",
  "Addvar",
  "Addvild",
  "Agmaer",
  "Akar",
  "Alding",
  "Aldis",
  "Alfarinn",
  "Alvor",
  "Andurs",
  "Angrenor",
  "Angvid",
  "Argis",
  "Arnbjorn",
  "Arngeir",
  "Arnskar",
  "Arrald",
  "Asbjorn",
  "Asgeir",
  "Aslfur",
  "Assur",
  "Atar",
  "Aventus",
  "Avulstein",
  "Badnir",
  "Balbus",
  "Balgruuf",
  "Balimund",
  "Bassianus",
  "Beirand",
  "Belrand",
  "Benkum",
  "Benor",
  "Bersi",
  "Bjorlam",
  "Bjornolfr",
  "Bolgeir",
  "Bolli",
  "Bolund",
  "Borgny",
  "Borri",
  "Borvir",
  "Bottar",
  "Briehl",
  "Brill",
  "Brond",
  "Brunwulf",
  "Brynjolf",
  "Bulfrek",
  "Calder",
  "Christer",
  "Dagur",
  "Dengeir",
  "Drahff",
  "Drennen",
  "Eimar",
  "Einarth",
  "Elgrim",
  "Embry",
  "Eorlund",
  "Erik",
  "Erikur",
  "Erlendr",
  "Esbern",
  "Falk",
  "Farengar",
  "Farkas",
  "Felldir",
  "Fenrig",
  "Filnjar",
  "Frodnar",
  "Frofnir",
  "Froki",
  "Frorkmar",
  "Frothar",
  "Galmar",
  "Garthar",
  "Garuk",
  "Geimund",
  "Geirlund",
  "Gestur",
  "Gissur",
  "Gjak",
  "Gjalund",
  "Gjuk",
  "Gloth",
  "Golldir",
  "Gonnar",
  "Gorm",
  "Gort",
  "Gralnach",
  "Gregor",
  "Grimvar",
  "Grisvar",
  "Gunding",
  "Gunmar",
  "Gunnar",
  "Guthrum",
  "Hadring",
  "Hadvar",
  "Hafnar",
  "Hajvarr",
  "Hakar",
  "Haknir",
  "Hakon",
  "Halvar",
  "Haming",
  "Hans",
  "Hargar",
  "Harkon",
  "Harlaug",
  "Harrald",
  "Heddic",
  "Heimskr",
  "Heimvar",
  "Helvard",
  "Hemming",
  "Henrik",
  "Heratar",
  "Hern",
  "Hewnon",
  "Hjalfar",
  "Hjornskar",
  "Hjorunn",
  "Hod",
  "Hofgrir",
  "Hogni",
  "Holgeir",
  "Horgeir",
  "Horik",
  "Horm",
  "Hreinn",
  "Hroar",
  "Hrodulf",
  "Hroggar",
  "Hrollod",
  "Hrolmir",
  "Hrongar",
  "Hrothmund",
  "Hugin",
  "Hunroor",
  "Idolaf",
  "Igmund",
  "Irlof",
  "Irnskar",
  "Istar",
  "Jenssen",
  "Jervar",
  "Jesper",
  "Jod",
  "Jofthor",
  "Jolf",
  "Jon",
  "Jorgen",
  "Joric",
  "Jorleif",
  "Jorn",
  "Jurgen",
  "Kai",
  "Karl",
  "Kibell",
  "Kjar",
  "Kleppr",
  "Klimmek",
  "Knjakr",
  "Knud",
  "Kodlak",
  "Kodrir",
  "Korir",
  "Kottir",
  "Kraldar",
  "Kust",
  "Kvenel",
  "Kyr",
  "Lars",
  "Leifur",
  "Leigelf",
  "Lemkil",
  "Llewellyn",
  "Lod",
  "Lodi",
  "Lodvar",
  "Logrolf",
  "Lokil",
  "Lokir",
  "Lond",
  "Lorenz",
  "Lortheim",
  "Lund",
  "Lygrleid",
  "Lynoit",
  "Majni",
  "Markus",
  "Mathies",
  "Maul",
  "Metilius",
  "Mikael",
  "Miraak",
  "Molgrom",
  "Mralki",
  "Narfi",
  "Nelkir",
  "Niels",
  "Nikulas",
  "Nils",
  "Odar",
  "Odfel",
  "Oengul",
  "Ogmund",
  "Olaf",
  "Olfrid",
  "Ollrod",
  "Onmund",
  "Orgnar",
  "Orthjolf",
  "Pactur",
  "Raerek",
  "Ragnar",
  "Ralof",
  "Ranmir",
  "Rargal",
  "Reves",
  "Rhorlak",
  "Rigel",
  "Rissing",
  "Rogen",
  "Roggi",
  "Roggvir",
  "Rolff",
  "Rorik",
  "Rorlund",
  "Rundi",
  "Rustleif",
  "Sabjorn",
  "Saerlund",
  "Sibbi",
  "Siddgeir",
  "Sifnar",
  "Sigaar",
  "Sigar",
  "Sigurd",
  "Sild",
  "Sinding",
  "Sinmir",
  "Sirgar",
  "Skaggi",
  "Skald",
  "Skeggr",
  "Skjor",
  "Skuli",
  "Skulnar",
  "Skulvar",
  "Snilf",
  "Snilling",
  "Snorreid",
  "Sogrlaf",
  "Solaf",
  "Stalf",
  "Steirod",
  "Stenvar",
  "Stig",
  "Styrr",
  "Sulvar",
  "Svaknir",
  "Sven",
  "Talsgar",
  "Thadgeir",
  "Thaer",
  "Thalin",
  "Thjollod",
  "Thonar",
  "Thongvor",
  "Thonjolf",
  "Thonnir",
  "Thorald",
  "Thorek",
  "Thoring",
  "Thorygg",
  "Thorgar",
  "Thrynn",
  "Tolan",
  "Tolfdir",
  "Torbjorn",
  "Torolf",
  "Torsten",
  "Torvar",
  "Torygg",
  "Trilf",
  "Tsun",
  "Tulvur",
  "Ulfberth",
  "Ulfgar",
  "Ulfr",
  "Ulfric",
  "Unmid",
  "Vald",
  "Valdar",
  "Valdimar",
  "Valdr",
  "Vanik",
  "Vekel",
  "Verner",
  "Vidgrod",
  "Viding",
  "Vidrald",
  "Vignar",
  "Vilkas",
  "Vilod",
  "Vipir",
  "Virkmund",
  "Volk",
  "Vorstag",
  "Vulwulf",
  "Wilhelm",
  "Wilmuth",
  "Wulfgar",
  "Wuunferth",
  "Yngvar",
  "Yrsarald",
];

let highlanderNamesF = [
  "Astrid",
  "Bodil",
  "Frida",
  "Gertrud",
  "Gro",
  "Estrid",
  "Hilda",
  "Gudrun",
  "Gunhild",
  "Helga",
  "Inga",
  "Liv",
  "Randi",
  "Signe",
  "Sigrid",
  "Revna",
  "Sif",
  "Tora",
  "Tove",
  "Thyra",
  "Thurid",
  "Ysra",
  "Ulfhild",
  "Ase",
  "Abelone",
  "Adisla",
  "Aela",
  "Aeri",
  "Agna",
  "Agni",
  "Agnis",
  "Alea",
  "Alfhild",
  "Alva",
  "Alvide",
  "Annekke",
  "Angi",
  "Anise",
  "Anska",
  "Argi",
  "Ari",
  "Asta",
  "Astrid",
  "Beitild",
  "Bergritte",
  "Betrid",
  "Birna",
  "Bjartur",
  "Bodil",
  "Bolfrida",
  "Boti",
  "Breya",
  "Brina",
  "Britte",
  "Bryling",
  "Dagny",
  "Danica",
  "Dorthe",
  "Drifa",
  "Edith",
  "Eirid",
  "Eisa",
  "Elda",
  "Elisif",
  "Erdi",
  "Eris",
  "Evette",
  "Faida",
  "Fastred",
  "Fjori",
  "Fjola",
  "Fjotra",
  "Frabbi",
  "Fralia",
  "Freir",
  "Frida",
  "Fridrika",
  "Fruki",
  "Fura",
  "Gerda",
  "Gerdur",
  "Gisli",
  "Gormlaith",
  "Grelka",
  "Grelod",
  "Greta",
  "Grete",
  "Gretta",
  "Grosta",
  "Gwendolyn",
  "Haelga",
  "Hafjorg",
  "Hamal",
  "Haran",
  "Hefid",
  "Helgi",
  "Helgird",
  "Hermir",
  "Hert",
  "Hestla",
  "Hilde",
  "Hillevi",
  "Hjordis",
  "Hoddreid",
  "Hrefna",
  "Hroki",
  "Huki",
  "Hulda",
  "Iddra",
  "Illdi",
  "Inge",
  "Ingjard",
  "Ingrid",
  "Ingun",
  "Iona",
  "Irgnir",
  "Jala",
  "Jora",
  "Jordis",
  "Katla",
  "Katria",
  "Laila",
  "Lami",
  "Lillith",
  "Lisbet",
  "Lydia",
  "Lynly",
  "Margret",
  "Matlara",
  "Maven",
  "Minette",
  "Mjoll",
  "Narri",
  "Nilsine",
  "Njada",
  "Nura",
  "Olava",
  "Olda",
  "Olfina",
  "Oriella",
  "Orla",
  "Rakel",
  "Rigel",
  "Rikke",
  "Ruki",
  "Runa",
  "Sapphire",
  "Serana",
  "Sigrid",
  "Silda",
  "Sissel",
  "Sofie",
  "Sonir",
  "Sorli",
  "Susanna",
  "Svana",
  "Svari",
  "Swanhvir",
  "Sylgja",
  "Tekla",
  "Temba",
  "Thaena",
  "Threki",
  "Tilde",
  "Tilma",
  "Tormir",
  "Tova",
  "Una",
  "Uthgerd",
  "Valerica",
  "Vori",
  "Ysolda",
];

let highlanderLastNames = [
  "Bristol",
  "Brighton",
  "Abbey",
  "Greenwood",
  "Brightspear",
  "Darklance",
  "Whitemountain",
  "Palemountain",
  "Goldmountain",
  "Darkmountain",
  "Brightpeak",
  "Whitepeak",
  "Brightmountain",
  "Goldpeak",
  "Darkpeak",
  "Greenmountain",
  "Greenpeak",
  "Cole",
  "Smith",
  "Jack",
  "Connor",
  "Jones",
  "Williams",
  "Johnson",
  "Brown",
  "Taylor",
  "Davies",
  "Wilson",
  "Evans",
  "Thomas",
  "Roberts",
];

let lowlanderNamesM = [
  "Lukas",
  "Leon",
  "Finn",
  "Tobias",
  "Jonas",
  "Ben",
  "Elias",
  "Thomas",
  "Noah",
  "Felix",
  "Jurgen",
  "Karl",
  "Stefan",
  "Walter",
  "Uwe",
  "Hans",
  "Klaus",
  "Gunter",
  "Johan",
  "Johann",
  "Wolfgang",
  "Mozart",
  "Sebastian",
  "Bach",
];
let lowlanderNamesF = [
  "Emma",
  "Anna",
  "Julia",
  "Leah",
  "Hannah",
  "Laura",
  "Lena",
  "Mia",
  "Sofia",
  "Lina",
  "Mila",
  "Ella",
  "Ursula",
  "Christina",
  "Ilse",
  "Ingrid",
  "Petra",
  "Monika",
  "Gisela",
  "Susanne",
  "Elise",
];

let lowlanderLastNames = [
  "Muller",
  "Schmidt",
  "Schneider",
  "Fischer",
  "Weber",
  "Meyer",
  "Wagner",
  "Becker",
  "Schulz",
  "Hoffmann",
  "Schafer",
  "Koch",
  "Bauer",
  "Richter",
  "Klein",
  "Wolf",
  "Schroder",
  "Wolfgang",
  "Neumann",
  "Schwarz",
  "Zimmermann",
  "Braun",
  "Kruger",
  "Hofmann",
  "Hartmann",
  "Lange",
  "Schmitt",
  "Werner",
  "Schmitz",
  "Krause",
  "Bachman",
  "Schumacher",
  "Ludwig",
  "Kraus",
  "Keller",
  "Friedrich",
  "Lorenz",
  "Baumann",
  "Gunther",
  "Keller",
  "Hahn",
  "Schubert",
  "Albrecht",
  "Schuster",
  "Bohm",
  "Kramer",
  "Stein",
  "Jaeger",
  "Otto",
  "Sommer",
  "Heinrich",
  "Brandt",
  "Haas",
];

let miditineNamesM = [
  "Alberto",
  "Alessio",
  "Alessandro",
  "Angelo",
  "Anselmo",
  "Antonio",
  "Bruno",
  "Bernardo",
  "Carlo",
  "Cristiano",
  "Claudio",
  "Damiano",
  "Dario",
  "Domenico",
  "Enrico",
  "Enzo",
  "Eugenio",
  "Ezio",
  "Fabrizio",
  "Filippo",
  "Federico",
  "Francesco",
  "Franco",
  "Flavio",
  "Gaetano",
  "Gennaro",
  "Giorgio",
  "Giuliano",
  "Gregorio",
  "Lorenzo",
  "Marco",
  "Mario",
  "Martino",
  "Massimo",
  "Matteo",
  "Maurizio",
  "Mauro",
  "Nevio",
  "Norberto",
  "Ottaviano",
  "Paolo",
  "Pietro",
  "Riccardo",
  "Roberto",
  "Silvio",
  "Stefano",
  "Tommaso",
  "Umberto",
  "Valentino",
  "Vincenzo",
  "Vittorio",
  "Achille",
  "Aimone",
  "Alceste",
  "Alcide",
  "Amilcare",
  "Amintore",
  "Annibale",
  "Apollone",
  "Aristotele",
  "Ariodante",
  "Astore",
  "Baldassarre",
  "Beppe",
  "Carmine",
  "Cesare",
  "Clemente",
  "Daniele",
  "Dante",
  "Davide",
  "Emanuele",
  "Ercole",
  "Ettore",
  "Felice",
  "Gabriele",
  "Gaspare",
  "Gastone",
  "Gentile",
  "Giacobbe",
  "Giosu√®",
  "Giuseppe",
  "Leone",
  "Marte",
  "Melchiorre",
  "Michele",
  "Nataniele",
  "Oddone",
  "Ottone",
  "Pasquale",
  "Raffaele",
  "Salomone",
  "Salvatore",
  "Samuele",
  "Sante",
  "Scipione",
  "Simone",
  "Ulisse",
  "Vitale",
  "Vittore",
  "Dionigi",
  "Gianni",
  "Giovanni",
  "Luigi",
  "Nanni",
  "Ranieri",
];
let miditineNamesF = [
  "Abby",
  "Academia",
  "Artemis",
  "Acadalia",
  "Dalia",
  "Berlia",
  "Branlia",
  "Adela",
  "Adalina",
  "Adelina",
  "Adeline",
  "Adrienna",
  "Adrienne",
  "Adriana",
  "Angela",
  "Anita",
  "Anna",
  "Arianna",
  "Aurora",
  "Berta",
  "Bettina",
  "Carla",
  "Corinna",
  "Cristiana",
  "Diana",
  "Elena",
  "Elisa",
  "Eugenia",
  "Fabrizia",
  "Federica",
  "Francesca",
  "Gabriella",
  "Gianna",
  "Giovanna",
  "Giuliana",
  "Ilaria",
  "Isabella",
  "Lavinia",
  "Loredana",
  "Lucia",
  "Lucrezia",
  "Luisa",
  "Maddalena",
  "Maria",
  "Martina",
  "Massima",
  "Nicoletta",
  "Olivia",
  "Ornella",
  "Paola",
  "Patrizia",
  "Piera",
  "Roberta",
  "Sara",
  "Simona",
  "Silvia",
  "Sofia",
  "Stella",
  "Teresa",
  "Valentina",
  "Vittoria",
  "Viviana",
  "Zarina",
  "Zita",
  "Adelaide",
  "Adele",
  "Agnese",
  "Alice",
  "Beatrice",
  "Berenice",
  "Geltrude",
  "Irene",
  "Matilde",
  "Rachele",
  "Venere",
  "Vera",
  "Violetta",
  "Noemi",
];

let miditineLastNames = [
  "Bernardello",
  "Vettorello",
  "Iannuccillo",
  "Bortoletto",
  "Bernardino",
  "Ravellino",
  "Verdino",
  "Mangione",
  "Bellone",
  "Capone",
  "Pastene",
  "Mantone",
  "Vallone",
  "Boccaccio",
  "Terrazzo",
  "Varasso",
  "Rumium",
  "Latium",
  "Grecium",
  "Venetium",
  "Siclium",
  "Lombardium",
  "Piemontium",
  "Salmoiraghium",
  "Ornaghium",
  "Vernengoium",
  "Martinengoium",
  "Giordanengoium",
  "Lambertenghium",
  "Lamborghinium",
  "Afrium",
  "Manticoloium",
  "Coloium",
  "Friulium",
  "Tuscanium",
  "Sardinium",
  "Calabrium",
  "Campanium",
  "Abruzzoium",
];

let hanNamesM = [
  "Good",
  "Great",
  "Everlasting",
  "Splendor",
  "War",
  "Archer",
  "Brick",
  "Up",
  "Arrow",
  "Sword",
  "Shield",
  "Knight",
  "King",
  "Horse",
  "Dragon",
  "Red",
  "Fire",
  "Smith",
  "White",
  "Blue",
  "Black",
  "Ember",
  "Light",
  "Dark",
  "Emblem",
  "Eagle",
  "Bridge",
  "Bird",
  "Wind",
  "Cloud",
  "Rain",
  "Snow",
  "Storm",
  "Lightning",
  "Thunder",
  "Fly",
  "Bolt",
  "Chair",
  "House",
  "Bastion",
  "Tower",
  "Advisor",
  "Intelligent",
  "Wise",
  "Strong",
  "Brave",
  "Fierce",
  "Powerful",
  "Genius",
  "Handsome",
  "Butcher",
  "Warrior",
  "Iron",
  "Equalizer",
];

let hanNamesF = [
  "Good",
  "Great",
  "Everlasting",
  "Splendor",
  "Beautiful",
  "Flower",
  "White",
  "Red",
  "Blue",
  "Black",
  "Ember",
  "Light",
  "Intelligent",
  "Silk",
  "Rain",
  "Snow",
  "Rose",
  "Bird",
  "Quick",
  "Wind",
  "Cloud",
  "Joy",
  "Love",
  "Peace",
  "Happiness",
  "Smile",
  "Relax",
];

let hanLastNames = [
  "Wang",
  "Ming",
  "Luo",
  "Lee",
  "Zhou",
  "Chan",
  "Tian",
  "Han",
  "Gang",
  "Bing",
  "Long",
  "Lao",
  "Liu",
  "Ma",
  "Hong",
  "Bo",
  "Yang",
  "Jin",
  "Min",
  "Ning",
  "Wei",
  "Chao",
  "Su",
  "Tang",
];

let nameGen = (firstNames, lastNames) => {
  let index = Math.floor(Math.random() * firstNames.length);
  let nameString = "";
  nameString += firstNames[index];
  nameString += " ";
  index = Math.floor(Math.random() * lastNames.length);
  nameString += lastNames[index];
  return nameString;
};

let weightedRandom = (data, weights) => {
  let totalWeight = 0;
  for (let w of weights) {
    totalWeight += w;
  }

  let random = Math.floor(Math.random() * totalWeight);

  for (let i = 0; i < data.length; i++) {
    random -= weights[i];
    if (random < 0) {
      return data[i];
    }
  }
};

let highlanderColorGen = () => {
  let hair = ["white", "blonde", "red", "brown", "black"];
  let weight = [80, 15, 0, 4, 1];
  let color = weightedRandom(hair, weight);
  return color;
};

let lowlanderColorGen = () => {
  let hair = ["white", "blonde", "red", "brown", "black"];
  let weight = [0, 20, 20, 20, 20];
  let color = weightedRandom(hair, weight);
  return color;
};

let miditineColorGen = () => {
  let hair = ["white", "blonde", "red", "brown", "black"];
  let weight = [0, 10, 10, 70, 10];
  let color = weightedRandom(hair, weight);
  return color;
};

let hanColorGen = () => {
  let hair = ["white", "blonde", "red", "brown", "black"];
  let weight = [0, 0, 2, 18, 80];
  let color = weightedRandom(hair, weight);
  return color;
};

let races = () => {
  let races = ["highlander", "lowlander", "miditine", "han"];
  let weight = [1, 1, 1, 1];
  let race = weightedRandom(races, weight);
  return race;
};

export let names = () => {
  let highlanderNameM = nameGen(highlanderNamesM, highlanderLastNames);
  let lowlanderNameM = nameGen(lowlanderNamesM, lowlanderLastNames);
  let miditineNameM = nameGen(miditineNamesM, miditineLastNames);
  let hanNameM = nameGen(hanNamesM, hanLastNames);

  let highlanderNameF = nameGen(highlanderNamesF, highlanderLastNames);
  let lowlanderNameF = nameGen(lowlanderNamesF, lowlanderLastNames);
  let miditineNameF = nameGen(miditineNamesF, miditineLastNames);
  let hanNameF = nameGen(hanNamesF, hanLastNames);

  let charNames = {
    male: {
      highlander: highlanderNameM,
      lowlander: lowlanderNameM,
      miditine: miditineNameM,
      han: hanNameM,
    },
    female: {
      highlander: highlanderNameF,
      lowlander: lowlanderNameF,
      miditine: miditineNameF,
      han: hanNameF,
    },
  };

  return charNames;
};

export let colors = () => {
  let highlanderColor = highlanderColorGen();
  let lowlanderColor = lowlanderColorGen();
  let miditineColor = miditineColorGen();
  let hanColor = hanColorGen();

  let charColors = {
    highlander: highlanderColor,
    lowlander: lowlanderColor,
    miditine: miditineColor,
    han: hanColor,
  };

  return charColors;
};

// let raceList = document.getElementsByClassName("race");
// let nameList = document.getElementsByClassName("name");
// let colorList = document.getElementsByClassName("hair");

// for (let i = 0; i < raceList.length; i++) {
//   let raceName = races();
//   raceList[i].innerHTML = raceName;
//   nameList[i].innerHTML = names()["female"][raceName];
//   colorList[i].innerHTML = colors()[raceName];
// }

// //Make the DIV element draggagle:
// let cardList = document.getElementsByClassName("card");

// for (let i = 0; i < raceList.length; i++) {
//   dragElement(cardList[i]);
// }

// function dragElement(elmnt) {
//   var pos1 = 0,
//     pos2 = 0,
//     pos3 = 0,
//     pos4 = 0;
//   if (document.getElementById(elmnt.id + "header")) {
//     /* if present, the header is where you move the DIV from:*/
//     document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
//   } else {
//     /* otherwise, move the DIV from anywhere inside the DIV:*/
//     elmnt.onmousedown = dragMouseDown;
//   }

//   function dragMouseDown(e) {
//     e = e || window.event;
//     e.preventDefault();
//     // get the mouse cursor position at startup:
//     pos3 = e.clientX;
//     pos4 = e.clientY;
//     document.onmouseup = closeDragElement;
//     // call a function whenever the cursor moves:
//     document.onmousemove = elementDrag;
//   }

//   function elementDrag(e) {
//     e = e || window.event;
//     e.preventDefault();
//     // calculate the new cursor position:
//     pos1 = pos3 - e.clientX;
//     pos2 = pos4 - e.clientY;
//     pos3 = e.clientX;
//     pos4 = e.clientY;
//     // set the element's new position:
//     elmnt.style.top = elmnt.offsetTop - pos2 + "px";
//     elmnt.style.left = elmnt.offsetLeft - pos1 + "px";
//   }

//   function closeDragElement() {
//     /* stop moving when mouse button is released:*/
//     document.onmouseup = null;
//     document.onmousemove = null;
//   }
// }

const north_lyonian_names = [
  "Snowfall",
  "Winterhold",
  "Frostwind",
  "Icepeak",
  "Whitewall",
  "Silverstream",
  "Coldharbor",
  "Snowflake",
  "Glacier",
  "Frostfire",
];

const south_lyonian_names = [
  "Goldcrest",
  "Riverdale",
  "Greenfield",
  "Stonebridge",
  "Rosewood",
  "Sunset",
  "Lakeshore",
  "Oakvale",
  "Ironforge",
  "Brighton",
];

const great_valley_names = [
  "Starfall",
  "Moonlight",
  "Dawnbreak",
  "Nightfall",
  "Sunrise",
  "Twilight",
  "Midnight",
  "Duskwood",
  "Daydream",
  "Nightmare",
];

const red_steppes_names = [
  "Redrock",
  "Bloodriver",
  "Firestorm",
  "Blazefield",
  "Flameheart",
  "Burningsand",
  "Ashland",
  "Scorchedearth",
  "Searingwind",
  "Inferno",
];

const dragon_lands_names = [
  "Dragonheart",
  "Dragonclaw",
  "Dragonscale",
  "Dragonbone",
  "Dragonfire",
  "Dragonwing",
  "Dragontail",
  "Dragonfang",
  "Dragonblood",
  "Dragoneye",
];

const nyxine_continent_names = [
  "Oasis",
  "Mirage",
  "Anemone",
  "Dune",
  "Canyon",
  "Sphinx",
  "Nile",
  "Golden",
  "Khufu",
  "Ankh",
];

const atlaspanine_mountains_names = [
  "Skyreach",
  "Cloudrest",
  "Highpeak",
  "Snowcap",
  "Everest",
  "Kota",
  "Makalu",
  "Lhotse",
  "Cho Oyu",
  "Manaslu",
];

const male_names = [
  "William",
  "Henry",
  "Richard",
  "John",
  "Robert",
  "Geoffrey",
  "Simon",
  "Peter",
  "Hugh",
  "Roger",
  "Ralph",
  "Nicholas",
  "Philip",
  "Thomas",
  "Walter",
  "Gilbert",
  "Alan",
  "Adam",
  "Stephen",
  "Edmund",
  "Benedict",
  "Arnold",
  "Baldwin",
  "Bartholomew",
  "Bernard",
  "Cecil",
  "Clarence",
  "Clement",
  "Cornelius",
  "Cuthbert",
  "Edgar",
  "Edwin",
  "Elias",
  "Francis",
  "Frederick",
  "Gerald",
  "Gregory",
  "Humphrey",
  "Jeremiah",
  "Julian",
  "Lawrence",
  "Leonard",
  "Maurice",
  "Nathaniel",
  "Norman",
  "Oswald",
  "Randolph",
  "Raymond",
  "Reginald",
  "Roland",
  "Sampson",
  "Theobald",
  "Victor",
  "Vincent",
  "Wilfred",
];

const female_names = [
  "Adelina",
  "Agnes",
  "Avice",
  "Beatrice",
  "Cecily",
  "Clara",
  "Constance",
  "Diana",
  "Edith",
  "Eleanor",
  "Elizabeth",
  "Emma",
  "Eva",
  "Felicia",
  "Florence",
  "Gisela",
  "Helen",
  "Ida",
  "Isabella",
  "Joan",
  "Juliana",
  "Katherine",
  "Laura",
  "Lucia",
  "Margaret",
  "Maria",
  "Matilda",
  "Maud",
  "Millicent",
  "Nesta",
  "Nicola",
  "Petronilla",
  "Philippa",
  "Richenda",
  "Rohesia",
  "Rosalind",
  "Sarah",
  "Susanna",
  "Sybil",
  "Theophania",
  "Ursula",
  "Valentina",
  "Willelma",
  "Xenia",
  "Yolanda",
  "Zita",
  "Evelyn",
  "Charlotte",
  "Cynthia",
  "Dorothy",
  "Florence",
  "Gisela",
  "Helen",
  "Ida",
  "Isabella",
  "Kate",
  "Lillian",
  "Margaret",
  "Mary",
  "Nina",
  "Olivia",
  "Patricia",
  "Rachel",
  "Tina",
  "Victoria",
  "Willy",
  "Yvonne",
  "Susan",
  "Anne",
  "Barbara",
  "Alice",
  "Caroline",
];

const skin_colors = [
  "very pale",
  "pale",
  "fair",
  "tan",
  "very tan",
  "dark",
  "black",
];

const hair_colors = ["black", "blonde", "brown", "red", "white"];

const hair_length = [
  "short",
  "medium",
  "long",
  "very long",
  "braided",
  "curly",
  "wavy",
  "styled",
  "jeweled",
];

const eye_color = [
  "dark blue",
  "blue",
  "light blue",
  "green",
  "light brown",
  "brown",
  "red",
  "black",
  "grey",
  "amber",
  "rose",
];

const body = [
  "very short",
  "short",
  "medium",
  "very tall",
  "tall",
  "very thin",
  "thin",
  "meaty",
  "gaunt",
  "muscular",
  "very muscular",
  "athletic",
  "very athletic",
  "brawny",
  "healthy",
  "slim and fit",
  "slim and athletic",
  "slim and muscular",
  "very weak",
  "weak",
];

const pos_personality = [
  "chaste",
  "temperate",
  "generous",
  "diligent",
  "kind",
  "calm",
  "humble",
  "patient",
  "content",
  "forgiving",
  "gregarious",
  "honest",
  "just",
  "trusting",
  "zealous",
  "innocent",
  "stubborn",
  "pragmatic",
  "mature",
  "serious",
];

const neg_personality = [
  "lustful",
  "gluttonous",
  "greedy",
  "lazy",
  "envious",
  "wrathful",
  "arrogant",
  "impatient",
  "ambitious",
  "vengeful",
  "shy",
  "deceitful",
  "arbitrary",
  "paranoid",
  "cynical",
  "jaded",
  "fickle",
  "eccentric",
  "childish",
  "playful",
];

const childhood = [
  "impoverished parents",
  "very poor parents",
  "poor parents",
  "rich parents",
  "spoiled by parents",
  "very spoiled by parents",
  "distant parents",
  "loving parents",
  "good parents",
  "strict parents",
  "very strict parents",
  "noble parents",
  "orphan",
  "street urchin",
  "steppes child",
  "merchant child",
  "slave",
  "criminal parents",
  "scholar parents",
  "forester parents",
  "villager parents",
  "farmer parents",
  "military parents",
  "seafarer parents",
  "nomad parents",
  "caravaneer parents",
  "travelling mummer parents",
  "smith parents",
  "artist parents",
];

const role = [
  "knight",
  "general",
  "noble",
  "spymaster",
  "admiral",
  "scholar",
  "bodyguard",
  "mercenary captain",
  "financier",
  "diplomat",
  "assassin",
  "inventor",
];

const food = [
  "lamb kabob",
  "grilled fish",
  "grilled chicken",
  "beef soup",
  "beef roast",
  "beef kabob",
  "pork kabob",
  "pork roast",
  "cheese",
  "snack foods",
  "chips",
  "fruit",
  "candied fruit",
  "steak",
  "burger",
  "salad",
  "mushroom soup",
  "tomato pasta",
  "alfredo pasta",
];

const char = {
  look: ["blonde", "red", "brown", "black"],
  build: ["weak", "average", "strong", "long"],
  skill: ["talker", "fighter", "rogue", "erudite"],
  goal: ["survival", "resources", "relationships", "idea"],
};

const place = {
  look: ["poor", "common", "decorated", "rich"],
  type: ["edge", "transitional", "typical", "complex"],
  population: ["empty", "sparse", "populated", "busy"],
  welcome: ["open", "public", "private", "secluded"],
};

const scene = {
  own: ["stolen", "foreign", "common", "own"],
  alignment: ["helpful", "neutral", "unexpected", "opposing"],
  rarity: ["insignificant", "mundane", "special", "unique"],
  type: ["event", "entity", "object", "environment"],
};

const plot = {
  writing: ["artistry", "dialogue", "description", "exposition"],
  narrative: ["foreshadow", "reveal", "action", "fallout"],
  goal: ["create", "take", "seek", "destroy"],
  step: ["casing", "entry", "objective", "extraction"],
};

const emotions = [
  "enlightenment",
  "peace",
  "joy",
  "love",
  "reason",
  "acceptance",
  "willingness",
  "neutrality",
  "courage",
  "pride",
  "anger",
  "desire",
  "fear",
  "grief",
  "apathy",
  "guilt",
  "shame",
];

export function rC(array) {
  const randomIndex = Math.floor(Math.random() * array.length);
  return array[randomIndex];
}

export const person = () => {
  let output = {};

  output["name"] =
    rC(rpgNames["male_names"]) + " " + rC(rC(rpgNames["namesList"]));
  output["trait"] = rC([...pos_personality, ...neg_personality]);

  return output;
};

export const rpgNames = {
  namesList: [
    north_lyonian_names,
    south_lyonian_names,
    great_valley_names,
    great_valley_names,
    red_steppes_names,
    dragon_lands_names,
    nyxine_continent_names,
    atlaspanine_mountains_names,
  ],
  north_lyonian_names: north_lyonian_names,
  south_lyonian_names: south_lyonian_names,
  great_valley_names: great_valley_names,
  red_steppes_names: red_steppes_names,
  dragon_lands_names: dragon_lands_names,
  nyxine_continent_names: nyxine_continent_names,
  atlaspanine_mountains_names: atlaspanine_mountains_names,
  male_names: male_names,
  female_names: female_names,
  skin_colors: skin_colors,
  hair_colors: hair_colors,
  hair_length: hair_length,
  eye_color: eye_color,
  body: body,
  pos_personality: pos_personality,
  neg_personality: neg_personality,
  childhood: childhood,
  role: role,
  food: food,
};

export class StoryGenerator {
  constructor() {
    this.data = {
      char: {
        look: ["blonde", "red", "brown", "black"],
        build: ["weak", "average", "strong", "long"],
        skill: ["talker", "fighter", "rogue", "erudite"],
        goal: ["survival", "resources", "relationships", "idea"],
      },
      place: {
        look: ["poor", "common", "decorated", "rich"],
        type: ["edge", "transitional", "typical", "complex"],
        population: ["empty", "sparse", "populated", "busy"],
        welcome: ["open", "public", "private", "secluded"],
      },
      scene: {
        own: ["stolen", "foreign", "common", "own"],
        alignment: ["helpful", "neutral", "unexpected", "opposing"],
        rarity: ["insignificant", "mundane", "special", "unique"],
        type: ["event", "entity", "object", "environment"],
      },
      plot: {
        writing: ["artistry", "dialogue", "description", "exposition"],
        narrative: ["foreshadow", "reveal", "action", "fallout"],
        goal: ["create", "take", "seek", "destroy"],
        step: ["casing", "entry", "objective", "extraction"],
      },
      emotions: [
        "enlightenment",
        "peace",
        "joy",
        "love",
        "reason",
        "acceptance",
        "willingness",
        "neutrality",
        "courage",
        "pride",
        "anger",
        "desire",
        "fear",
        "grief",
        "apathy",
        "guilt",
        "shame",
      ],
    };
  }

  generateString(type, keys) {
    const values = keys.map((key) => rC(this.data[type][key]));
    return values.join(" ");
  }

  generateCharString() {
    return `A ${this.generateString("char", [
      "look",
      "build",
      "skill",
    ])} driven by ${rC(this.data.char.goal)}.`;
  }

  generatePlaceString() {
    return `A ${this.generateString("place", ["look", "type"])} location, ${rC(
      this.data.place.population
    )} and ${rC(this.data.place.welcome)}.`;
  }

  generateSceneString() {
    return `${this.generateString("scene", [
      "own",
      "alignment",
      "rarity",
      "type",
    ])}.`;
  }

  generatePlotString() {
    return `${rC(this.data.plot.writing)} focuses on ${rC(
      this.data.plot.narrative
    )}, aiming to ${rC(this.data.plot.goal)} during the ${rC(
      this.data.plot.step
    )} phase.`;
  }
}
